{"version":3,"sources":["App.tsx","index.tsx"],"names":["now","Date","days","Array","keys","map","i","format","setDay","rows","App","React","getFullYear","toString","value","setValue","year","setYear","nextYear","padStart","isNaN","getTime","isLY","isLeapYear","monthsByFirstDay","bgByMonth","isoMonth","month","firstDay","getDay","formattedMonth","toUpperCase","push","daysInMonth","getDaysInMonth","className","row","col","j","dayEl","months","reverse","monthEls","bg","day","date","dateEl","colSpan","rowSpan","type","onChange","e","target","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.9c2c7b38.chunk.js","sourcesContent":["import { isLeapYear, format, setDay, getDaysInMonth } from \"date-fns\";\nimport * as React from \"react\";\n\nimport \"./styles.css\";\n\nconst now = new Date();\n\nconst days = [...new Array(7).keys()].map((i) => format(setDay(now, i), \"ccc\"));\nconst rows = [...new Array(5).keys()];\n\nexport default function App() {\n  const [value, setValue] = React.useState(new Date().getFullYear().toString());\n  const [year, setYear] = React.useState(value);\n\n  React.useEffect(() => {\n    const nextYear = value.padStart(4, \"0\");\n    if (!isNaN(new Date(`${nextYear}-01-01T00:00:00`).getTime())) {\n      setYear(nextYear);\n    }\n  }, [value]);\n\n  const isLY = isLeapYear(new Date(`${year}-01-01T00:00:00`));\n\n  const monthsByFirstDay: { [firstDay: number]: string[] } = {};\n  const bgByMonth: { [month: string]: string } = {};\n  for (let i = 1; i <= 12; i++) {\n    const isoMonth = i.toString().padStart(2, \"0\");\n    const month = new Date(`${year}-${isoMonth}-01T00:00:00`);\n    const firstDay = month.getDay();\n    const formattedMonth = format(month, \"LLL\").toUpperCase();\n    monthsByFirstDay[firstDay] = monthsByFirstDay[firstDay] || [];\n    monthsByFirstDay[firstDay].push(formattedMonth);\n\n    const daysInMonth = getDaysInMonth(month);\n    bgByMonth[formattedMonth] =\n      daysInMonth === 31\n        ? \"bg-red\"\n        : daysInMonth === 30\n        ? \"bg-green\"\n        : \"bg-blue\";\n  }\n\n  return (\n    <div className=\"app\">\n      <table>\n        <thead>\n          {days.map((row, i) => (\n            <tr key={row}>\n              {days.map((col, j) => {\n                const dayEl = (\n                  <th\n                    key={col}\n                    className={`day ${i === 0 ? \"border-top\" : \"\"} ${\n                      j === 6 ? \"border-right\" : \"border-right-dotted\"\n                    } ${i === 6 ? \"border-bottom\" : \"border-bottom-dotted\"} ${\n                      j === 0 ? \"border-left\" : \"\"\n                    } ${j % 2 === 0 ? \"bg-gray\" : \"\"}`}\n                  >\n                    {days[(j - i + 7) % 7]}\n                  </th>\n                );\n                if (!j) {\n                  const months = monthsByFirstDay[(7 - i) % 7].reverse();\n                  const monthEls = [...Array(3).keys()].map((i) => {\n                    const month = months[2 - i] || \"\";\n                    const bg = bgByMonth[month] || \"\";\n                    return (\n                      <th key={2 - i} className={`month ${bg}`}>\n                        {months[2 - i] || \"\"}\n                      </th>\n                    );\n                  });\n                  return (\n                    <React.Fragment key={col}>\n                      {monthEls}\n                      {dayEl}\n                    </React.Fragment>\n                  );\n                }\n                return dayEl;\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody>\n          {rows.map((row, i) => (\n            <tr key={row}>\n              {days.map((day, j) => {\n                const date = 7 * i + j + 1;\n                const bg =\n                  date === 31\n                    ? \"bg-red\"\n                    : date === 30\n                    ? \"bg-green\"\n                    : (isLY && date === 29) || (!isLY && date === 28)\n                    ? \"bg-blue\"\n                    : j % 2 === 0\n                    ? \"bg-gray\"\n                    : \"\";\n                const dateEl =\n                  date <= 31 ? (\n                    <td\n                      key={day}\n                      className={`${bg} ${i === 0 ? \"border-top\" : \"\"} ${\n                        j === 6 || date === 31\n                          ? \"border-right\"\n                          : \"border-right-dotted\"\n                      } ${\n                        date >= 25 ? \"border-bottom\" : \"border-bottom-dotted\"\n                      } ${j === 0 ? \"border-left\" : \"\"}`}\n                    >\n                      {date}\n                    </td>\n                  ) : null;\n                if (!i && !j) {\n                  return (\n                    <React.Fragment key={day}>\n                      <td colSpan={3} rowSpan={5}>\n                        <input\n                          type=\"text\"\n                          value={value}\n                          onChange={(e) => setValue(e.target.value)}\n                        />\n                      </td>\n                      {dateEl}\n                    </React.Fragment>\n                  );\n                }\n                return dateEl;\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}